// Code generated by MockGen. DO NOT EDIT.
// Source: roaring.go

// Package roaring is a generated GoMock package.
package roaring

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRB64API is a mock of RB64API interface.
type MockRB64API struct {
	ctrl     *gomock.Controller
	recorder *MockRB64APIMockRecorder
}

// MockRB64APIMockRecorder is the mock recorder for MockRB64API.
type MockRB64APIMockRecorder struct {
	mock *MockRB64API
}

// NewMockRB64API creates a new mock instance.
func NewMockRB64API(ctrl *gomock.Controller) *MockRB64API {
	mock := &MockRB64API{ctrl: ctrl}
	mock.recorder = &MockRB64APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRB64API) EXPECT() *MockRB64APIMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRB64API) Add(ctx context.Context, x uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockRB64APIMockRecorder) Add(ctx, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRB64API)(nil).Add), ctx, x)
}

// Clear mocks base method.
func (m *MockRB64API) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockRB64APIMockRecorder) Clear(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRB64API)(nil).Clear), ctx)
}

// Contains mocks base method.
func (m *MockRB64API) Contains(ctx context.Context, x uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", ctx, x)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains.
func (mr *MockRB64APIMockRecorder) Contains(ctx, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockRB64API)(nil).Contains), ctx, x)
}

// IsEmpty mocks base method.
func (m *MockRB64API) IsEmpty(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockRB64APIMockRecorder) IsEmpty(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockRB64API)(nil).IsEmpty), ctx)
}

// Len mocks base method.
func (m *MockRB64API) Len(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Len indicates an expected call of Len.
func (mr *MockRB64APIMockRecorder) Len(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockRB64API)(nil).Len), ctx)
}

// Remove mocks base method.
func (m *MockRB64API) Remove(ctx context.Context, x uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRB64APIMockRecorder) Remove(ctx, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRB64API)(nil).Remove), ctx, x)
}

// MockRB32API is a mock of RB32API interface.
type MockRB32API struct {
	ctrl     *gomock.Controller
	recorder *MockRB32APIMockRecorder
}

// MockRB32APIMockRecorder is the mock recorder for MockRB32API.
type MockRB32APIMockRecorder struct {
	mock *MockRB32API
}

// NewMockRB32API creates a new mock instance.
func NewMockRB32API(ctrl *gomock.Controller) *MockRB32API {
	mock := &MockRB32API{ctrl: ctrl}
	mock.recorder = &MockRB32APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRB32API) EXPECT() *MockRB32APIMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRB32API) Add(ctx context.Context, x uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockRB32APIMockRecorder) Add(ctx, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRB32API)(nil).Add), ctx, x)
}

// Clear mocks base method.
func (m *MockRB32API) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockRB32APIMockRecorder) Clear(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRB32API)(nil).Clear), ctx)
}

// Contains mocks base method.
func (m *MockRB32API) Contains(ctx context.Context, x uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", ctx, x)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains.
func (mr *MockRB32APIMockRecorder) Contains(ctx, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockRB32API)(nil).Contains), ctx, x)
}

// IsEmpty mocks base method.
func (m *MockRB32API) IsEmpty(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockRB32APIMockRecorder) IsEmpty(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockRB32API)(nil).IsEmpty), ctx)
}

// Len mocks base method.
func (m *MockRB32API) Len(ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Len indicates an expected call of Len.
func (mr *MockRB32APIMockRecorder) Len(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockRB32API)(nil).Len), ctx)
}

// Remove mocks base method.
func (m *MockRB32API) Remove(ctx context.Context, x uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, x)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRB32APIMockRecorder) Remove(ctx, x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRB32API)(nil).Remove), ctx, x)
}
